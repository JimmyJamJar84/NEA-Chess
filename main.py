import chess.pgn
import string

def getPieceValueTables(color): #P, N, B, R, Q or K
    if color == chess.WHITE:
        return {'p': [0,  0,  0,  0,  0,  0,  0,  0,
                    50, 50, 50, 50, 50, 50, 50, 50,
                    10, 10, 20, 30, 30, 20, 10, 10,
                    5,  5, 10, 25, 25, 10,  5,  5,
                    0,  0,  0, 20, 20,  0,  0,  0,
                    5, -5,-10,  0,  0,-10, -5,  5,
                    5, 10, 10,-20,-20, 10, 10,  5,
                    0,  0,  0,  0,  0,  0,  0,  0],
                    'n': [-50,-40,-30,-30,-30,-30,-40,-50,
                    -40,-20,  0,  0,  0,  0,-20,-40,
                    -30,  0, 10, 15, 15, 10,  0,-30,
                    -30,  5, 15, 20, 20, 15,  5,-30,
                    -30,  0, 15, 20, 20, 15,  0,-30,
                    -30,  5, 10, 15, 15, 10,  5,-30,
                    -40,-20,  0,  5,  5,  0,-20,-40,
                    -50,-40,-30,-30,-30,-30,-40,-50],
                    'b': [-20,-10,-10,-10,-10,-10,-10,-20,
                    -10,  0,  0,  0,  0,  0,  0,-10,
                    -10,  0,  5, 10, 10,  5,  0,-10,
                    -10,  5,  5, 10, 10,  5,  5,-10,
                    -10,  0, 10, 10, 10, 10,  0,-10,
                    -10, 10, 10, 10, 10, 10, 10,-10,
                    -10,  5,  0,  0,  0,  0,  5,-10,
                    -20,-10,-10,-10,-10,-10,-10,-20],
                    'r': [  0,  0,  0,  0,  0,  0,  0,  0,
                    5, 10, 10, 10, 10, 10, 10,  5,
                    -5,  0,  0,  0,  0,  0,  0, -5,
                    -5,  0,  0,  0,  0,  0,  0, -5,
                    -5,  0,  0,  0,  0,  0,  0, -5,
                    -5,  0,  0,  0,  0,  0,  0, -5,
                    -5,  0,  0,  0,  0,  0,  0, -5,
                    0,  0,  0,  5,  5,  0,  0,  0],
                    'q': [-20,-10,-10, -5, -5,-10,-10,-20,
                    -10,  0,  0,  0,  0,  0,  0,-10,
                    -10,  0,  5,  5,  5,  5,  0,-10,
                    -5,  0,  5,  5,  5,  5,  0, -5,
                    0,  0,  5,  5,  5,  5,  0, -5,
                    -10,  5,  5,  5,  5,  5,  0,-10,
                    -10,  0,  5,  0,  0,  0,  0,-10,
                    -20,-10,-10, -5, -5,-10,-10,-20],
                    'k':[-30,-40,-40,-50,-50,-40,-40,-30,
                    -30,-40,-40,-50,-50,-40,-40,-30,
                    -30,-40,-40,-50,-50,-40,-40,-30,
                    -30,-40,-40,-50,-50,-40,-40,-30,
                    -20,-30,-30,-40,-40,-30,-30,-20,
                    -10,-20,-20,-20,-20,-20,-20,-10,
                    20, 20,  0,  0,  0,  0, 20, 20,
                    20, 30, 10,  0,  0, 10, 30, 20] }
    else:
        return {'p': [0, 0, 0, 0, 0, 0, 0, 0,
                    5, 10, 10, -20, -20, 10, 10, 5,
                    5, -5, -10, 0, 0, -10, -5, 5,
                    0, 0, 0, 20, 20, 0, 0, 0,
                    5, 5, 10, 25, 25, 10, 5, 5,
                    10, 10, 20, 30, 30, 20, 10, 10,
                    50, 50, 50, 50, 50, 50, 50, 50,
                    0, 0, 0, 0, 0, 0, 0, 0],
                'n': [-50, -40, -30, -30, -30, -30, -40, -50,
                    -40, -20, 0, 5, 5, 0, -20, -40,
                    -30, 5, 10, 15, 15, 10, 5, -30,
                    -30, 0, 15, 20, 20, 15, 0, -30,
                    -30, 5, 15, 20, 20, 15, 5, -30,
                    -30, 0, 10, 15, 15, 10, 0, -30,
                    -40, -20, 0, 0, 0, 0, -20, -40,
                    -50, -40, -30, -30, -30, -30, -40, -50],
                'b': [-20, -10, -10, -10, -10, -10, -10, -20,
                    -10, 5, 0, 0, 0, 0, 5, -10,
                    -10, 10, 10, 10, 10, 10, 10, -10,
                    -10, 0, 10, 10, 10, 10, 0, -10,
                    -10, 5, 5, 10, 10, 5, 5, -10,
                    -10, 0, 5, 10, 10, 5, 0, -10,
                    -10, 0, 0, 0, 0, 0, 0, -10,
                    -20, -10, -10, -10, -10, -10, -10, -20],
                'r': [0, 0, 0, 5, 5, 0, 0, 0,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    -5, 0, 0, 0, 0, 0, 0, -5,
                    5, 10, 10, 10, 10, 10, 10, 5,
                    0, 0, 0, 0, 0, 0, 0, 0],
                'q':[-20, -10, -10, -5, -5, -10, -10, -20,
                    -10, 0, 0, 0, 0, 0, 0, -10,
                    -10, 5, 5, 5, 5, 5, 0, -10,
                    0, 0, 5, 5, 5, 5, 0, -5,
                    -5, 0, 5, 5, 5, 5, 0, -5,
                    -10, 0, 5, 5, 5, 5, 0, -10,
                    -10, 0, 0, 0, 0, 0, 0, -10,
                    -20, -10, -10, -5, -5, -10, -10, -20],
                'k': [ 20, 30, 10, 0, 0, 10, 30, 20,
                    20, 20, 0, 0, 0, 0, 20, 20,
                    -10, -20, -20, -20, -20, -20, -20, -10,
                    -20, -30, -30, -40, -40, -30, -30, -20,
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -30, -40, -40, -50, -50, -40, -40, -30,
                    -30, -40, -40, -50, -50, -40, -40, -30] }

# pgn = open("game1.pgn")
# game1 = chess.pgn.read_game(pgn)
# board = game1.board()
# for move in game1.mainline_moves():
#     board.push(move)
# print(board)

def lettersToNumbers(uci):
    num = ''
    alpha = list(string.ascii_lowercase)
    for i in uci:
        if i in alpha:
            num += str(alpha.index(i))
        else: 
            num += str(i)
    return num

def getArrayValueFromUCI(array, uci):
    uci = lettersToNumbers(uci)
    return array[int(uci[0]) + 8* int(uci[1])]

def evaluate_move(board, move):
    piece_tables = getPieceValueTables(board.color_at(move.from_square))
    piece_table = piece_tables.get(board.piece_at(move.from_square).symbol().lower())

    pre_move_value = getArrayValueFromUCI(piece_table, move.uci()[0:2])
    post_move_value = getArrayValueFromUCI(piece_table, move.uci()[2:4])

    print(f'Move: {move.from_square} to {move.to_square}\nPre_value: {pre_move_value}\nPost_value: {post_move_value}\n')

board = chess.Board()
print(board)
for move in board.legal_moves:
    evaluate_move(board, move)

